@model TeamScreen.Models.Settings.CoreSettings

<div id="app">
    <div id="contentContainer"></div>

    <div class="controls">
        <i class="fa fa-circle-o-notch fa-spin" v-if="loading"></i>
        <i class="fa fa-chevron-left" aria-hidden="true" v-on:click="loadPreviousPlugin"></i>
        <i class="fa fa-pause" aria-hidden="true" v-if="!paused" v-on:click="pause"></i>
        <i class="fa fa-play" aria-hidden="true" v-if="paused" v-on:click="resume"></i>
        <i class="fa fa-chevron-right" aria-hidden="true" v-on:click="loadNextPlugin"></i>
        <a href='@Url.Action("Index","Settings")'>
            <i class="fa fa-cog settings-button" aria-hidden="true"></i>
        </a>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        var vm = new Vue({
            el: "#app",
            data: {
                index: 0,
                availablePlugins: [],
                interval: @Model.Interval,
                paused: false,
                loading: false,
                timer: 0,
            },

            methods: {
                loadPreviousPlugin: function () {
                    this.loading = true;

                    if (this.index > 0)
                        this.index--;
                    else
                        this.index = this.availablePlugins.length - 1;

                    $("#contentContainer").load(this.availablePlugins[this.index], function () { this.loading = false; });
                },
                loadNextPlugin: function () {
                    this.loading = true;

                    if (this.index < this.availablePlugins.length - 1)
                        this.index++;
                    else
                        this.index = 0;

                    $("#contentContainer").load(this.availablePlugins[this.index], function () { this.loading = false; });
                },
                pause: function() {
                    this.paused = true;
                },
                resume: function() {
                    this.paused = false;
                },
                tick: function () {
                    if (this.paused)
                        return;

                    this.timer++;
                    if (this.timer == this.interval) {
                        this.loadNextPlugin();
                        this.timer = 0;
                    }
                },

                handleKeyboard: function (event) {
                    if (event.keyCode === 32) //space
                        this.paused = !this.paused;
                    else if (event.keyCode === 37) //left arrow
                        this.loadPreviousPlugin();
                    else if (event.keyCode === 39) //right arrow
                        this.loadNextPlugin();

                    event.preventDefault();
                },
            },

            mounted: function () {
                this.$http.get('@Url.Action("GetUsedPluginsUrls", "Plugin")').then(function(response) {
                    this.availablePlugins = response.body;

                    this.loadNextPlugin();
                    setInterval(this.tick, 1000);
                }, function(response) {
                    alert("Error during retrieving list of used plugins");
                });

                $(document).keydown(this.handleKeyboard);
            }
        });
    </script>
}